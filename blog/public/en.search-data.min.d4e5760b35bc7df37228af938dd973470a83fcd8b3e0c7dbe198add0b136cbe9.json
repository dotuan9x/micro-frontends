[{"id":0,"href":"/docs/table-of-contents/when-to-use/","title":"Khi nào ta nên nghĩ tới việc sử dụng Micro Frontends","section":"Micro Frontends","content":"Khi nào ta nên nghĩ tới việc sử dụng Micro Frontends #   Có thể bạn sẽ muốn phát triển một progressive hoặc responsive web application nhưng bạn gặp khó khăn trong việc tích hợp vào source code hiện tại của mình Có thể bạn muốn sử dụng một thư viện mới để tăng tốc quá trình phát triển sản phẩm của mình (vd: trước đó sử dụng Angularjs (1.x) để phát triển và hiện tại muốn sử dụng ReactJS để phát triển) Có thể bạn muốn sử dụng một thư viện mới để tăng tốc quá trình phát triển sản phẩm của mình (vd: trước đó sử dụng Angularjs (1.x) để phát triển và hiện tại muốn sử dụng ReactJS để phát triển) Bạn muốn sử dụng một thư viện mới để hỗ trợ cho các chức năng sản phẩm, như sử dụng Webpack 5.x nhưng project hiện tại đang sử dụng Webpack 3.x và khó có thể nâng cấp lên Webpack 5.x được vì có khá nhiều dependence bị ảnh hưởng. Có thể bạn muốn tăng tốc quá trình phát triển sản phẩm bằng cách nhiều team khác nhau tham gia vào phát triển một sản phẩm cùng lúc bằng việc tách ra nhiều module và phát triển độc lập.  "},{"id":1,"href":"/docs/table-of-contents/advantages-and-disadvantages/","title":"Một số ưu điểm và nhược điểm của Micro Frontends","section":"Micro Frontends","content":"Một số ưu điểm và nhược điểm của Micro Frontends #  Ưu điểm #  Nhược điểm #  "},{"id":2,"href":"/docs/table-of-contents/method/","title":"Một số phương pháp triển khai Micro Frontends","section":"Micro Frontends","content":"Một số phương pháp triển khai Micro Frontends #  Build-time integration #  là việc coi các ứng dụng như một package và ứng dụng chính sẽ thêm các ứng dụng con như một thư viện như sau:\n{ \u0026#34;name\u0026#34;: \u0026#34;@feed-me/container\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;A food delivery web app\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;@feed-me/browse-restaurants\u0026#34;: \u0026#34;^1.2.3\u0026#34;, \u0026#34;@feed-me/order-food\u0026#34;: \u0026#34;^4.5.6\u0026#34;, \u0026#34;@feed-me/user-profile\u0026#34;: \u0026#34;^7.8.9\u0026#34; } } Cách tiếp cận này có một số hạn chế như:\n Chúng ta sẽ phải re-compile (bundle) các ứng dụng chính và release lại mỗi khi các ứng dụng con có thay đổi (release version mới từ 0.0.1 ⇒ 0.02) Không có sự đồng bộ chức năng giữa các ứng dụng chính nếu chúng ta bỏ xót quá trình đồng bộ version của ứng dụng con (Cũng có thể là một điểm lợi nếu chúng ta không muốn nâng cấp chức năng ở một trang nào đó) Phụ thuộc các dependences với nhau  Nếu project @feed-me/container sử dụng React và @feed-me/browse-restaurants cũng sử dụng React thì sẽ bị trùng lập thư viện và tăng dung lượng khi tải trang web Nếu project @feed-me/container sử dụng React và @feed-me/browse-restaurants sử dụng chung React với project chính thì sẽ bị phụ thuộc vào version của project chính.    Run-time integration via iframes #  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Feed me!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Welcome to Feed me!\u0026lt;/h1\u0026gt; \u0026lt;iframe id=\u0026#34;micro-frontend-container\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; const microFrontendsByRoute = { \u0026#39;/\u0026#39;: \u0026#39;https://browse.example.com/index.html\u0026#39;, \u0026#39;/order-food\u0026#39;: \u0026#39;https://order.example.com/index.html\u0026#39;, \u0026#39;/user-profile\u0026#39;: \u0026#39;https://profile.example.com/index.html\u0026#39;, }; const iframe = document.getElementById(\u0026#39;micro-frontend-container\u0026#39;); iframe.src = microFrontendsByRoute[window.location.pathname]; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Mỗi lần thay đổi url từ https://acb.com/ sang https://acb.com/order-food phần nội dụng của trang sẽ được tải lại bởi một nội dung từ domain khác, trong ví dụ là https://order.example.com/index.html.\nƯu điểm:\n Không bị ảnh hưởng bởi styles (CSS) giữa các trang chính và trang trong iframe  Hạn chế:\n Phải tải lại toàn bộ trang khi thay đổi đường dẫn Khó khăn trong việc giao tiếp giữa các chức năng  Run-time integration via JavaScript #  Run-time integration via Web Components #  Cách tiếp cận này cho phép chúng ta khai báo một HTML Custom element, ví dụ như ta khai báo một HTML Custom element  thì chỗ nào muốn sử dụng ta chỉ cần chèn đoạn mã  là có thể sử dụng một cách vi vu\nModule Federation Webpack 5 #  "},{"id":3,"href":"/docs/example/react-example/","title":"React Example","section":"Ví dụ","content":"Docs page one\n"},{"id":4,"href":"/docs/example/react-redux/","title":"React Redux","section":"Ví dụ","content":"Docs page one\n"},{"id":5,"href":"/docs/example/web-components/","title":"Web Components","section":"Ví dụ","content":"Docs page one\n"},{"id":6,"href":"/posts/post-one/","title":"Post One","section":"Posts","content":"posts post one\n"}]