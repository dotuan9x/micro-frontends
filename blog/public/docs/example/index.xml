<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ví dụ on Micro frontends</title>
    <link>https://micro-frontends.tuando.net/docs/example/</link>
    <description>Recent content in Ví dụ on Micro frontends</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://micro-frontends.tuando.net/docs/example/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Iframes</title>
      <link>https://micro-frontends.tuando.net/docs/example/iframes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://micro-frontends.tuando.net/docs/example/iframes/</guid>
      <description>Iframe example#Để triển khai iframe thì đơn giản khỏi phải nói luôn. Ta chỉ cần chèn HTML tag &amp;lt;iframe src=&amp;quot;example.com&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt; là có ngay một app khác xịn sò vào trong ứng dụng của mình liền.
Demo: Mình sẽ demo iframe bằng cách gắn một app khác (app products hiện thị các sản phẩm liên quan) vào một app chính như hình bên dưới.
Trong file App.jsx của project container đã chèn HTML tag iframe như bên dưới, và kết quả sẽ như hình bên trên.</description>
    </item>
    
    <item>
      <title>Run-time integration via JavaScript</title>
      <link>https://micro-frontends.tuando.net/docs/example/run-time-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://micro-frontends.tuando.net/docs/example/run-time-integration/</guid>
      <description>Run-time integration via JavaScript#Trong React thông thường file index.jsx ta sẽ render &amp;lt;App /&amp;gt; vào trong một div element có id là root như &amp;lt;div id=&amp;quot;root&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
// /run-time-integration/products/src/index.jsx import React from &amp;#34;react&amp;#34;; import ReactDOM from &amp;#34;react-dom&amp;#34;; import App from &amp;#34;./App&amp;#34;; ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&amp;#34;root&amp;#34;)); Ta sẽ chỉnh lại như sau, khai báo một function global renderProducts truyển vào parameter containerId và tiến hành sử dụng ReactDOM render &amp;lt;App /&amp;gt; vào trong element này.</description>
    </item>
    
    <item>
      <title>Web components</title>
      <link>https://micro-frontends.tuando.net/docs/example/web-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://micro-frontends.tuando.net/docs/example/web-components/</guid>
      <description>Web components#Để khai báo một HTML Custom Element ta thực hiện như sau:
// /web-components/products/src/index.jsx import React from &amp;#34;react&amp;#34;; import ReactDOM from &amp;#34;react-dom&amp;#34;; import App from &amp;#34;./App&amp;#34;; class Webcomponents extends HTMLElement { constructor() { super(); } connectedCallback() { ReactDOM.render(&amp;lt;App /&amp;gt;, this); } } customElements.define(&amp;#39;web-components-products&amp;#39;, Webcomponents); Trong file index.html của project container ta load bundle file của project products
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;The Model Store&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;#34;https://micro-frontends.</description>
    </item>
    
    <item>
      <title>Module Federation React Example</title>
      <link>https://micro-frontends.tuando.net/docs/example/react-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://micro-frontends.tuando.net/docs/example/react-example/</guid>
      <description>Module Federation React Example#Module Federation là một plugin của webpack 5, nên ta tiến hành cấu hình webpack như sau:
Import ModuleFederationPlugin của webpack (lưu ý module này chỉ có trong webpack 5 trở lên)
// webpack.config const {ModuleFederationPlugin} = require(&amp;#39;webpack&amp;#39;).container; Sau đó ta cấu hình plugin trong project products như sau
// webpack.config (products project)  plugins: [ new ModuleFederationPlugin({ name: &amp;#39;Products&amp;#39;, library: {type: &amp;#39;var&amp;#39;, name: &amp;#39;Products&amp;#39;}, filename: &amp;#39;products.</description>
    </item>
    
    <item>
      <title>Module Federation React Redux</title>
      <link>https://micro-frontends.tuando.net/docs/example/react-redux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://micro-frontends.tuando.net/docs/example/react-redux/</guid>
      <description>Module Federation React Redux#Tương tự như phần Module Federation React Example nhưng trong demo này có sử dụng Redux để giao tiếp giữa 2 app với nhau.
Cụ thể là với demo bên dưới bạn có thể click vào sản phẩm ở phần Related products thì sản phẩm chính bên app container sẽ thay đổi theo
Source codeDemo</description>
    </item>
    
  </channel>
</rss>
